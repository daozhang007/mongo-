shiyanlou:~/ $ sudo service mongodb start                                                                                          [14:33:57]
 * Starting database mongodb                                                                                                           [ OK ] 
shiyanlou:~/ $ mongo                                                                                                               [14:34:12]
MongoDB shell version v3.6.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.5
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user
Server has startup warnings: 
2019-07-08T14:34:11.859+0800 I STORAGE  [initandlisten] 
2019-07-08T14:34:11.859+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2019-07-08T14:34:11.859+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] 
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] 
> 
> 
> show dbs
admin  0.000GB
local  0.000GB
> use test
switched to db test
> show help
2019-07-08T14:37:15.845+0800 E QUERY    [thread1] Error: don't know how to show [help] :
shellHelper.show@src/mongo/shell/utils.js:986:11
shellHelper@src/mongo/shell/utils.js:739:15
@(shellhelp2):1:1
> show db
2019-07-08T14:37:21.083+0800 E QUERY    [thread1] Error: don't know how to show [db] :
shellHelper.show@src/mongo/shell/utils.js:986:11
shellHelper@src/mongo/shell/utils.js:739:15
@(shellhelp2):1:1
> 
> 
> 
> show dbs
admin  0.000GB
local  0.000GB
> db
test
> us mydb
2019-07-08T14:37:55.347+0800 E QUERY    [thread1] SyntaxError: missing ; before statement @(shell):1:3
> 
> 
> db
test
> use db
switched to db db
> 
> 
> db
db
> show dbs
admin  0.000GB
local  0.000GB
> use local
switched to db local
> 
> 
> db.dropDatabase()
{ "dropped" : "local", "ok" : 1 }
> 
> 
> 
> show dbs
admin   0.000GB
config  0.000GB
> use mydb
switched to db mydb
> db.createCollection("users")
{ "ok" : 1 }
> show collections
users
> db.users.insert([
... ... { name : "jam",
... ... email : "jam@qq.com"
... ... },
... ... { name : "tom",
... ... email : "tom@qq.com"
... ... }
... ... ])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
> db.users.insert([
... ... { name : "jam",
... ... email : "jam@qq.com"
... ... },
... ... { name : "tom",
... ... email : "tom@qq.com"
... ... }
... ... ])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
> use shiyanlou
switched to db shiyanlou
> db.user.insert{name:"henry"}
2019-07-08T14:52:14.883+0800 E QUERY    [thread1] SyntaxError: missing ; before statement @(shell):1:14
> db.user.insert([
... {name:"henry"}
... ])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 1,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})


2.1.1 find() 语句
启动 MongoDB 服务，因为 MongoDB 并不随系统一起启动，可能以下命令运行后会等一小段的时间才会启动完毕。

sudo service mongodb start
进入 MongoDB 命令行操作界面，在命令行中敲 exit 可以退出。

mongo
find() 用法：db.COLLECTION_NAME.find()

> use post
> db.post.insert([
{
   title: 'MongoDB Overview',
   description: 'MongoDB is no sql database',
   by: 'shiyanlou',
   url: 'http://www.shiyanlou.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
},
{
   title: 'NoSQL Database',
   description: "NoSQL database doesn't have tables",
   by: 'shiyanlou',
   url: 'http://www.shiyanlou.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 20,
   comments: [
      {
         user:'user1',
         message: 'My first comment',
         dateCreated: new Date(2013,11,10,2,35),
         like: 0
      }
   ]
}
])
查询数据，不加任何参数默认返回所有数据记录：

> db.post.find()
这条语句会返回 post 集合中的所有文档，实际应用中不常见，因为这样会导致大量的数据传输，造成服务器响应迟缓甚至失去响应。

2.1.2 pretty() 语句
pretty() 可以使查询输出的结果更美观。

> db.post.find().pretty()
例如:

> db.users.find()
{ "_id" : ObjectId("5c35657e6ee1e0307e215fc8"), "name" : "shiyanlou", "age" : "21" }

> db.users.find().pretty()
{
    "_id" : ObjectId("5c35657e6ee1e0307e215fc8"),
    "name" : "shiyanlou",
    "age" : "21"
}
如果你想让 mongo shell 始终以 pretty 的方式显示返回数据，可以通过下面的指令实现：

echo "DBQuery.prototype._prettyShell = true" >> ~/.mongorc.js
这样就把默认的显示方式设置为 pretty 了。

> db.users.find()
{
    "_id" : ObjectId("5c35657e6ee1e0307e215fc8"),
    "name" : "bage",
    "age" : "21"
}


2.2 MongoDB 中的 AND
MongoDB 不需要类似于其他数据库的 AND 运算符，当 find() 中传入多个键值对时，MongoDB 就会将其作为 AND 查询处理。

用法：db.mycol.find({ key1: value1, key2: value2 }).pretty()

> db.post.find({"by":"shiyanlou","to": "chenshi"}).pretty()
如上语句就可以查找出 by 字段为 'shiyanlou'，to 字段为 'chenshi' 的所有记录，意思是找出系统中由 shiyanlou 发送给 chenshi 的所有邮件。

它对应的关系型 SQL 语句为：

SELECT * FROM post WHERE by = 'shiyanlou' AND to = 'chenshi'



2.3 MongoDB 中的 OR
2.3.1 OR
MongoDB 中，OR 查询语句以 $or 作为关键词，用法如下：

> db.post.find(
  {
    $or: [
      {key1: value1}, {key2:value2}
    ]
  }
).pretty()
操作示例：

> db.post.find({
    $or:[
        {"by":"shiyanlou"},
        {"title": "MongoDB Overview"}
    ]
}).pretty()
它对应的关系型 SQL 语句为：

SELECT * FROM post WHERE by = 'shiyanlou' OR title = 'MongoDB Overview'



同时使用 AND 和 OR
操作范例：

> db.post.find({
    "likes": {$gt:10},
    $or: [
        {"by": "shiyanlou"},
        {"title": "MongoDB Overview"}
    ]
}).pretty()
{$gt:10} 表示大于 10，另外，$lt 表示小于、$gte 表示大于等于、$lte 表示小于等于、$ne 表示不等于。

如果这样的符号记起来稍微有点麻烦，可以根据它们的全写配合记忆：

gt：大于 greater than
lt：小于 less than
gte：大于或等于 greater than equal
lte：小于或等于 less than equal


MongoDB 的模糊查询可以用正则匹配的方式实现

# 以 'start' 开头的匹配式：
{"name":/^start/}

# 以 'tail' 结尾的匹配式：
{"name":/tail^/}



删除数据库
语法：db.dropDatabase()

假设刚才我们使用语句 db.computer.insert({"name":"shiyanlou"}) 对数据库 Chenshi 进行了数据插入操作。

> show dbs      # 显示当前系统中的所有数据库
> use Chenshi   # 转到Chenshi数据库
switched to db Chenshi
> db.dropDatabase()
{"dropped":"Chenshi","ok":1}
> show dbs


 创建集合
语法：db.createCollection(name,options)

参数描述：

name：创建的集合名称
options：是一个作为初始化的文档(可选)
范例：

> db.createCollection("shiyanlou") #无参数
{ "ok" : 1 }
> show collections
shiyanlou
system.indexes
> db.createCollection("shiyanlou2", { capped : 1, autoIndexId : 1, size : 6142800, max : 10000 } ) #带参数
{ "ok ": 1 }
参数描述：

capped：类型为 Boolean，如果为 true 则创建一个固定大小的集合，当其条目达到最大时可以自动覆盖以前的条目。在设置其为 true 时也要指定参数大小；
autoIndexId：类型为 Boolean，默认为 false，如果设置为 true，则会在 _id 字段上自动创建索引；
size：如果 capped 为 true 则需要指定，指定参数的最大值，单位为 byte；
max：指定最大的文档数。
在 Mongodb 中也可以不用创建集合，因为在创建文档的时候也会自动的创建集合。

删除集合
语法：db.COLLECTION.drop()

操作实例：

> use Chenshi
switched to db Chenshi
> show collections
shiyanlou
shiyanlou2
system.indexes
> db.shiyanlou.drop()
true
> show collections
shiyanlou2
system.indexes
删除成功。

注意：当您要删除指定的集合时，用您想要删除的集合名称替代 COLLECTION 即可。



插入文档
语法：db.COLLECTION_NAME.insert(document)

操作实例：

> userdoc1=({"user_id":1,"name":"cloud","state":"active","actor":"user","e-mail":"test@qq.com","VM_num":2,"time":[{"date":"2014-08-12","hour":"10:53 PM"}] })
> userdoc2=({"user_id":2,"name":"testadmin","state":"active","actor":"admin","e-mail":"test@qq.com","VM_num":2,"time":[{"date":"2014-08-11","hour":"06:34 AM"}] })
> doc1=({"name":"peter","position":"teacher"})    #先定义文档

> use Chenshi
switched to db Chenshi
> db.shiyanlou.insert(userdoc1)
WriteResult({"nInserted":1})
> db.shiyanlou.insert(userdoc2)
WriteResult({"nInserted":1})
> db.shiyanlou.insert(doc1)
WriteResult({"nInserted":1})
插入文档成功，当然也可以直接将文档的内容作为函数的参数直接替代 document。



更新文档
语法：db.COLLECTION_NAME.update(SELECTION_CRITERIA,UPDATED_DATA)

操作实例：

> db.shiyanlou.update({"user_id":2,"e-mail":"test@qq.com"},{$set:{"e-mail":"group@qq.com"}})
WriteResult({"nMatched":1,"nUpserted":1,"nModified":1})
> db.shiyanlou.find()
将 user_id=2 的文档的 e-mail 改为 group@qq.com
第一个大括号内容标示查找条件，第二个大括号内容则表示更新后的数据
默认的 update 函数只对一个文档更新，如果想作用所有文档，则需要加入 multi:true
操作实例：

db.shiyanlou.update({"e-mail":"test@qq.com"},{$set:{"e-mail":"group@qq.com"}},{multi:true})


替换已存在的文档
语法：db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})

操作实例：

> db.shiyanlou.save({"_id":ObjectId("53ea174ccb4c62646d9544f4"),"name":"Bob","position":"techer"})
WriteResult({"nMatched":1,"nUpserted":1,"nModified":1})
这里的 _id 对应的是要替换文档的 _id。


 删除文档
语法：db.COLLECTION_NAME.remove(DELECTION_CRITERIA)

操作实例：

> db.shiyanlou.remove({"name":"Bob"})
WriteResult({"nRemoved":1})
其实 remove 函数的参数跟 update 函数的第一个参数一样，相当于查找条件，注意，不要误删！

删除后可以用查找命令确认数据：

> db.shiyanlou.find()

跟 insert 差不多，但是 save 更好用。


实验总结
本节实验介绍了集合和文档的基本操作，其中：

createCollection()：创建集合
db.COLLECTION.drop()：删除集合
db.COLLECTION_NAME.insert(document)：插入文档
db.COLLECTION_NAME.update(SELECTION_CRITERIA,UPDATED_DATA)：更新文档
db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})：替换已存在的文档
db.COLLECTION_NAME.remove(DELECTION_CRITERIA)：删除文档



索引和集合

开发准备
本节我们主要学习初始化环境以及初始化 MongoDB 数据库。

2.1 初始化环境
启动 MongoDB 服务，因为 MongoDB 并不随系统一起启动，可能以下命令运行后会等一小段的时间才会启动完毕。

sudo service mongodb start
进入 MongoDB 命令行操作界面，在命令行中敲exit可以退出。

mongo
实验中的布尔类型的 ture 用 1 代替，false 用 0 代替。

2.2 初始化 MongoDB 数据库
> use Chenshi
switched to db Chenshi

> db.createCollection("shiyanlou")    #无参数
{"ok":1}

> show collections
shiyanlou
system.indexes

> userdoc1=({"user_id":1,"name":"cloud","state":"active","actor":"user","e-mail":"test@qq.com","VM_num":2,"time":[{"date":"2014-08-12","hour":"10:53 PM"}] })

> userdoc2=({"user_id":2,"name":"testadmin","state":"active","actor":"admin","e-mail":"test@qq.com","VM_num":2,"time":[{"date":"2014-08-11","hour":"06:34 AM"}] })

> doc=({"name":"peter","position":"teacher"})

> db.shiyanlou.insert(userdoc1)
WriteResult({"nInserted":1})
> db.shiyanlou.insert(userdoc2)
WriteResult({"nInserted":1})
> db.shiyanlou.insert(doc)
WriteResult({"nInserted":1})


查询语句 find()
查询语句：db.COLLECTION_NAME.find(Parameter)

范例：

> db.shiyanlou.find()
这条指令用于查询 shiyanlou 集合中的全部文档信息，相当于 sqlite 中的 SELECT * FROM TABLE_NAME。

3.1.1 条件操作符 1
MongoDB 中的条件操作符有：

$gt：大于
$lt：小于
$gte：大于等于
$lte：小于等于
范例：

> db.shiyanlou.find({user_id:{$gt:1}})
> db.shiyanlou.find({user_id:{$lte:2,$gt:1}})
3.1.2 条件操作符 2
语法：$type:[key]

可选的 key 值如下：

1: 双精度型(Double)
2: 字符串(String)
3: 对象(Object)
4: 数组(Array)
5: 二进制数据(Binary data)
7: 对象 ID(Object id)
8: 布尔类型(Boolean)
9: 数据(Date)
10: 空(Null)
11: 正则表达式(Regular Expression)
13: JS 代码(Javascript)
14: 符号(Symbol)
15: 有作用域的 JS 代码(JavaScript with scope)
16: 32 位整型数(32-bit integer)
17: 时间戳(Timestamp)
18: 64 位整型数(64-bit integer)
-1: 最小值(Min key)
127: 最大值(Max key)
范例：

> db.shiyanlou.find({"name":{$type:2}})
上面的命令是用于查找 name 是字符串的文档记录，它等同于下面的命令：

> db.shiyanlou.find({"name":{$type:'string'}})
3.1.3 limit() 与 skip()
读取指定数量的数据记录 limit()。

范例：

> db.shiyanlou.find().limit(1)
读取一条记录，默认是排在最前面的那一条被读取。

读取时跳过指定数量的数据记录 skip()。

范例：

> db.shiyanlou.find().limit(1).skip(1)
当然，还可以添加 find 的查找条件的参数，以便进行更精确的查找。

3.1.4 MongoDB 排序 sort()
与 sqlite 中的排序一样有升序和降序，其中升序用 1 表示，降序用 -1 表示。

语法：db.COLLECTION_NAME.find().sort({KEY:1|-1})

范例：

> db.shiyanlou.find().sort({"time":1})



索引 ensureIndex()
索引通常能够极大的提高查询的效率，如果没有索引，MongoDB 在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可能要花费几十秒甚至几分钟，这无疑对网站的性能是非常致命的。

索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库集合中一个文档或多个文档的值进行排序的一种结构。

语法：db.COLLECTION_NAME.ensureIndex({KEY:1|-1})

同样 1 代表升序，-1 代表降序。

范例：

> db.shiyanlou.ensureIndex({"name":1})
ensureIndex() 的可选参数：

参数	类型	描述
background	Boolean	建立索引要不要阻塞其他数据库操作，默认为 false
unique	Boolean	建立的索引是否唯一，默认 false
name	string	索引的名称，若未指定，系统自动生成
dropDups	Boolean	建立唯一索引时，是否删除重复记录，默认 flase
sparse	Boolean	对文档不存在的字段数据不启用索引，默认 false
expireAfterSeconds	integer	设置集合的生存时间，单位为秒
v	index version	索引的版本号
weights	document	索引权重值，范围为 1 到 99999
default-language	string	默认为英语
language_override	string	默认值为 language
范例：

> db.shiyanlou.ensureIndex({"user_id":1,"name":1},{background:1})



聚合 aggregate()
语法：

db.COLLECTION_NAME.aggregate({
$match:{x:1},
{limit:NUM},
$group:{_id:$age}
})
这些参数都可选：

$match：查询，跟 find 一样；
$limit：限制显示结果数量；
$skip：忽略结果数量；
$sort：排序；
$group：按照给定表达式组合结果。
范例：

> db.shiyanlou.aggregate([{$group:{_id:"$name", user:{$sum:"$user_id"}}}])
$name 意为取得 name 的值。

3.3.1 聚合表达式
名称	描述
$sum	计算总和
$avg	计算平均值
min 和 min和max	计算最小值和最大值
$push	在结果文档中插入值到一个数组
$addToSet	在结果文档中插入值到一个数组，但不创建副本
$first	根据资源文档的排序获取第一个文档数据
$last	根据资源文档的排序获取最后一个文档数据
3.3.2 管道
MongoDB 的聚合管道将 MongoDB 文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。

表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。

聚合框架中常用的几个操作：

$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
$match：用于过滤数据，只输出符合条件的文档。$match 使用 MongoDB 的标准查询操作。
$limit：用来限制 MongoDB 聚合管道返回的文档数。
$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
$group：将集合中的文档分组，可用于统计结果。
$sort：将输入文档排序后输出。
$geoNear：输出接近某一地理位置的有序文档。
范例：

> db.shiyanlou.aggregate([{$match:{user_id:{$gt:0,$lte:2}}},{$group:{_id:"user",count:{$sum:1}}}])
{"_id":"user","count":2}



高级查询与索引

覆盖索引查询
所有的查询字段都是索引的一部分；所有的查询返回字段在同一个索引中。

由于索引存在于 RAM 中，因而从索引中获取数据要比扫描文档更快。

范例：

创建如下 users 集合（使用前面所学的方法创建该集合）：

{
   "contact": "987654321",
   "dob": "01-01-1991",
   "gender": "M",
   "name": "Tom Benzamin",
   "user_name": "tombenzamin"
}
在 users 中创建一个联合索引:

> db.users.ensureIndex({gender:1,user_name:1})
该索引会覆盖下面的查询：

> db.users.find({gender:"M"},{user_name:1,_id:0})
对于上述查询，MongoDB 不会在数据库文件中查找，而会从索引中提取数据。因为索引中不包含 _id 字段，所以 _id 在查询中会默认返回，可以在查询结果中将其排除。而 db.users.find({gender:"M"},{user_name:1}) 就不会被索引覆盖。





高级索引
创建如下 users 集合（使用前面所学的方法创建该集合）：

{
   "address": {
      "city": "chengdu",
      "province": "sichuan",
      "pincode": "123"
   },
   "tags": [
      "music",
      "cricket",
      "blogs"
   ],
   "name": "clound"
}
索引数组字段，在数组中创建索引，需要对数组中的每个字段依次建立索引。所以在我们为数组 tags 创建索引时，会为 music、cricket、blogs 三个值建立单独的索引。

范例：

> db.users.ensureIndex({"tags":1})
创建索引后，我们可以这样检索集合的 tags 字段：

> db.users.find({tags:"cricket"})
为了验证我们使用了索引，可以使用 explain 命令：

> db.users.find({tags:"cricket"}).explain()
此处输入图片的描述

2.3.1 索引子文档字段
假设我们需要通过 city、province、pincode 字段来检索文档，由于这些字段是子文档的字段，所以我们需要对子文档建立索引。

范例：

为子文档的三个字段创建索引，命令如下：

> db.users.ensureIndex({"address.city":1,"address.province":1,"address.pincode":1})
一旦创建索引，我们可以使用子文档的字段来检索数据：

> db.users.find({"address.city":"chengdu"})
记住查询表达式必须遵循指定的索引的顺序。所以上面创建的索引将支持以下查询：

> db.users.find({"address.city":"chengdu","address.province":"sichuan"})
同样支持以下查询：

> db.users.find({"address.city":"chengdu","address.province":"sichuan","address.pincode":"123"})


 原子操作
所谓原子操作，就是要么执行成功，要么执行失败，执行成功完成既定任务，执行失败还原执行前的状态。

常用原子操作命令：

2.4.1 $set
用来指定一个键并更新键值，若键不存在则创建。

{ $set : { field : value } }
2.4.2 $unset
用来删除一个键。

{ $unset : { field : 1} }
2.4.3 $inc
$inc 可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。

{ $inc : { field : value } }
2.4.4 $push
把 value 追加到 field 里面去，field 一定要是数组类型才行，如果 field 不存在，会新增一个数组类型加进去。

{ $push : { field : value } }
2.4.5 $pushAll
同 $push ，只是一次可以追加多个值到一个数组字段内。

{ $pushAll : { field : value_array } }
2.4.6 $pull
从数组 field 内删除一个等于 value 值。

{ $pull : { field : _value } }
2.4.7 $addToSet
增加一个值到数组内，而且只有当这个值不在数组内才增加。

2.4.8 $pop
删除数组的第一个或最后一个元素。

{ $pop : { field : 1 } }
2.4.9 $rename
修改字段名称:

{ $rename : { old_field_name : new_field_name } }
2.4.10 $bit
位操作，integer 类型

{$bit : { field : {and : 5}}}



查询分析
2.5.1 explain()
explain() 操作提供了查询信息，使用索引及查询统计等。有利于我们对索引的优化。接下来我们在 users 集合中创建 gender 和 user_name 的索引：

> db.users.ensureIndex({gender:1,user_name:1})
> db.users.find({gender:"M"},{user_name:1,_id:0}).explain()
此处输入图片的描述

2.5.2 hint()
虽然 MongoDB 查询优化器一般工作的很不错，但是也可以使用 hints() 来强迫 MongoDB 使用一个指定的索引。通过这种方法在某些情形下会提升性能。

范例：

指定使用 gender 和 user_name 索引字段来查询：

> db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1})
可以使用 explain() 函数来分析以上查询：

> db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()