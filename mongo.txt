shiyanlou:~/ $ sudo service mongodb start                                                                                          [14:33:57]
 * Starting database mongodb                                                                                                           [ OK ] 
shiyanlou:~/ $ mongo                                                                                                               [14:34:12]
MongoDB shell version v3.6.5
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 3.6.5
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user
Server has startup warnings: 
2019-07-08T14:34:11.859+0800 I STORAGE  [initandlisten] 
2019-07-08T14:34:11.859+0800 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2019-07-08T14:34:11.859+0800 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] 
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2019-07-08T14:34:13.644+0800 I CONTROL  [initandlisten] 
> 
> 
> show dbs
admin  0.000GB
local  0.000GB
> use test
switched to db test
> show help
2019-07-08T14:37:15.845+0800 E QUERY    [thread1] Error: don't know how to show [help] :
shellHelper.show@src/mongo/shell/utils.js:986:11
shellHelper@src/mongo/shell/utils.js:739:15
@(shellhelp2):1:1
> show db
2019-07-08T14:37:21.083+0800 E QUERY    [thread1] Error: don't know how to show [db] :
shellHelper.show@src/mongo/shell/utils.js:986:11
shellHelper@src/mongo/shell/utils.js:739:15
@(shellhelp2):1:1
> 
> 
> 
> show dbs
admin  0.000GB
local  0.000GB
> db
test
> us mydb
2019-07-08T14:37:55.347+0800 E QUERY    [thread1] SyntaxError: missing ; before statement @(shell):1:3
> 
> 
> db
test
> use db
switched to db db
> 
> 
> db
db
> show dbs
admin  0.000GB
local  0.000GB
> use local
switched to db local
> 
> 
> db.dropDatabase()
{ "dropped" : "local", "ok" : 1 }
> 
> 
> 
> show dbs
admin   0.000GB
config  0.000GB
> use mydb
switched to db mydb
> db.createCollection("users")
{ "ok" : 1 }
> show collections
users
> db.users.insert([
... ... { name : "jam",
... ... email : "jam@qq.com"
... ... },
... ... { name : "tom",
... ... email : "tom@qq.com"
... ... }
... ... ])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
> db.users.insert([
... ... { name : "jam",
... ... email : "jam@qq.com"
... ... },
... ... { name : "tom",
... ... email : "tom@qq.com"
... ... }
... ... ])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
> use shiyanlou
switched to db shiyanlou
> db.user.insert{name:"henry"}
2019-07-08T14:52:14.883+0800 E QUERY    [thread1] SyntaxError: missing ; before statement @(shell):1:14
> db.user.insert([
... {name:"henry"}
... ])
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 1,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})


2.1.1 find() 语句
启动 MongoDB 服务，因为 MongoDB 并不随系统一起启动，可能以下命令运行后会等一小段的时间才会启动完毕。

sudo service mongodb start
进入 MongoDB 命令行操作界面，在命令行中敲 exit 可以退出。

mongo
find() 用法：db.COLLECTION_NAME.find()

> use post
> db.post.insert([
{
   title: 'MongoDB Overview',
   description: 'MongoDB is no sql database',
   by: 'shiyanlou',
   url: 'http://www.shiyanlou.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
},
{
   title: 'NoSQL Database',
   description: "NoSQL database doesn't have tables",
   by: 'shiyanlou',
   url: 'http://www.shiyanlou.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 20,
   comments: [
      {
         user:'user1',
         message: 'My first comment',
         dateCreated: new Date(2013,11,10,2,35),
         like: 0
      }
   ]
}
])
查询数据，不加任何参数默认返回所有数据记录：

> db.post.find()
这条语句会返回 post 集合中的所有文档，实际应用中不常见，因为这样会导致大量的数据传输，造成服务器响应迟缓甚至失去响应。

2.1.2 pretty() 语句
pretty() 可以使查询输出的结果更美观。

> db.post.find().pretty()
例如:

> db.users.find()
{ "_id" : ObjectId("5c35657e6ee1e0307e215fc8"), "name" : "shiyanlou", "age" : "21" }

> db.users.find().pretty()
{
    "_id" : ObjectId("5c35657e6ee1e0307e215fc8"),
    "name" : "shiyanlou",
    "age" : "21"
}
如果你想让 mongo shell 始终以 pretty 的方式显示返回数据，可以通过下面的指令实现：

echo "DBQuery.prototype._prettyShell = true" >> ~/.mongorc.js
这样就把默认的显示方式设置为 pretty 了。

> db.users.find()
{
    "_id" : ObjectId("5c35657e6ee1e0307e215fc8"),
    "name" : "bage",
    "age" : "21"
}


2.2 MongoDB 中的 AND
MongoDB 不需要类似于其他数据库的 AND 运算符，当 find() 中传入多个键值对时，MongoDB 就会将其作为 AND 查询处理。

用法：db.mycol.find({ key1: value1, key2: value2 }).pretty()

> db.post.find({"by":"shiyanlou","to": "chenshi"}).pretty()
如上语句就可以查找出 by 字段为 'shiyanlou'，to 字段为 'chenshi' 的所有记录，意思是找出系统中由 shiyanlou 发送给 chenshi 的所有邮件。

它对应的关系型 SQL 语句为：

SELECT * FROM post WHERE by = 'shiyanlou' AND to = 'chenshi'



2.3 MongoDB 中的 OR
2.3.1 OR
MongoDB 中，OR 查询语句以 $or 作为关键词，用法如下：

> db.post.find(
  {
    $or: [
      {key1: value1}, {key2:value2}
    ]
  }
).pretty()
操作示例：

> db.post.find({
    $or:[
        {"by":"shiyanlou"},
        {"title": "MongoDB Overview"}
    ]
}).pretty()
它对应的关系型 SQL 语句为：

SELECT * FROM post WHERE by = 'shiyanlou' OR title = 'MongoDB Overview'



同时使用 AND 和 OR
操作范例：

> db.post.find({
    "likes": {$gt:10},
    $or: [
        {"by": "shiyanlou"},
        {"title": "MongoDB Overview"}
    ]
}).pretty()
{$gt:10} 表示大于 10，另外，$lt 表示小于、$gte 表示大于等于、$lte 表示小于等于、$ne 表示不等于。

如果这样的符号记起来稍微有点麻烦，可以根据它们的全写配合记忆：

gt：大于 greater than
lt：小于 less than
gte：大于或等于 greater than equal
lte：小于或等于 less than equal


MongoDB 的模糊查询可以用正则匹配的方式实现

# 以 'start' 开头的匹配式：
{"name":/^start/}

# 以 'tail' 结尾的匹配式：
{"name":/tail^/}



删除数据库
语法：db.dropDatabase()

假设刚才我们使用语句 db.computer.insert({"name":"shiyanlou"}) 对数据库 Chenshi 进行了数据插入操作。

> show dbs      # 显示当前系统中的所有数据库
> use Chenshi   # 转到Chenshi数据库
switched to db Chenshi
> db.dropDatabase()
{"dropped":"Chenshi","ok":1}
> show dbs


 创建集合
语法：db.createCollection(name,options)

参数描述：

name：创建的集合名称
options：是一个作为初始化的文档(可选)
范例：

> db.createCollection("shiyanlou") #无参数
{ "ok" : 1 }
> show collections
shiyanlou
system.indexes
> db.createCollection("shiyanlou2", { capped : 1, autoIndexId : 1, size : 6142800, max : 10000 } ) #带参数
{ "ok ": 1 }
参数描述：

capped：类型为 Boolean，如果为 true 则创建一个固定大小的集合，当其条目达到最大时可以自动覆盖以前的条目。在设置其为 true 时也要指定参数大小；
autoIndexId：类型为 Boolean，默认为 false，如果设置为 true，则会在 _id 字段上自动创建索引；
size：如果 capped 为 true 则需要指定，指定参数的最大值，单位为 byte；
max：指定最大的文档数。
在 Mongodb 中也可以不用创建集合，因为在创建文档的时候也会自动的创建集合。

删除集合
语法：db.COLLECTION.drop()

操作实例：

> use Chenshi
switched to db Chenshi
> show collections
shiyanlou
shiyanlou2
system.indexes
> db.shiyanlou.drop()
true
> show collections
shiyanlou2
system.indexes
删除成功。

注意：当您要删除指定的集合时，用您想要删除的集合名称替代 COLLECTION 即可。
